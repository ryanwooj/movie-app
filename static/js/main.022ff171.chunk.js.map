{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","react_default","a","createElement","src","alt","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","rank","rating","Movie_MoviePoster","Math","round","map","index","Movie_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","componentDidMount","setTimeout","_this","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","res","json","data","catch","err","console","log","_renderMovies","movie","src_Movie_0","medium_cover_image","id","integrity","crossorigin","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAgCMA,SAAc,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAF,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQK,IAAI,eAAeC,UAAU,oBAG3CC,EAAa,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAF,OACjBR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,MAiBaC,EAhDD,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAOZ,EAATW,EAASX,OAAQa,EAAjBF,EAAiBE,OAAQC,EAAzBH,EAAyBG,SAAUC,EAAnCJ,EAAmCI,KAAMC,EAAzCL,EAAyCK,OAAzC,OACZf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACc,EAAD,CAAajB,OAAQA,IACrBC,EAAAC,EAAAC,cAAA,UAAKY,EAAK,IAEdd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,UAAKe,KAAKC,MAAMH,GAAQ,EAAxB,cACAf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACZO,EAAOO,IAAI,SAACX,EAAOY,GAAR,OACVpB,EAAAC,EAAAC,cAACmB,EAAD,CAAYb,MAAOA,EAAOc,IAAKF,OAEnCpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACfL,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CACEuB,KAAMX,EACNY,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCqCDC,6MAxDbC,MAAQ,KAIRC,kBAAoB,WAClBC,WAAW,WACTC,EAAKC,cACJ,SAILA,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUR,EAAKS,WADf,OACLN,EADKG,EAAAI,KAEXV,EAAKW,SAAS,CACZR,WAHS,wBAAAG,EAAAM,SAAAV,QAObO,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKd,SACvBe,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,cAAgB,WAkBd,OAjBetB,EAAKH,MAAMM,OAAOjB,IAAK,SAACqC,EAAOpC,GAC5C,OAAOpB,EAAAC,EAAAC,cAACuD,EAAD,CACL9C,MAAO6C,EAAM7C,MACbZ,OAAQyD,EAAME,mBACdpC,IAAKkC,EAAMG,GACX/C,OAAQ4C,EAAM5C,OACdC,SAAU2C,EAAM3C,SAChBC,KAAMM,EACNL,OAAQyC,EAAMzC,QAEdf,EAAAC,EAAAC,cAAA,UACEC,IAAI,8CACJyD,UAAU,sDACVC,YAAY,0FAOX,IACCzB,EAAW0B,KAAKhC,MAAhBM,OACR,OACEpC,EAAAC,EAAAC,cAAA,OAAKG,UAAW+B,EAAS,MAAQ,OAC9BA,EAAS0B,KAAKP,gBAAkBvD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAeL,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,qBApD3E6D,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.022ff171.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n\nconst Movie = ({title, poster, genres, synopsis, rank, rating}) => (\n  <div className=\"Movie\">\n    <div className=\"Movie__Column\">\n        <MoviePoster poster={poster} />\n        <h3>{rank+1}</h3>\n    </div>\n    <div className=\"Movie__Column\">\n      <h1>{title}</h1>\n      <h5>{Math.round(rating)/2} Out of 5 </h5>\n      <div className=\"Movie__Genres\">\n        {genres.map((genre, index) =>\n          <MovieGenre genre={genre} key={index} />)}\n      </div>\n      <div className=\"Movie__Synopsis\">\n      <LinesEllipsis\n        text={synopsis}\n        maxLine='3'\n        ellipsis='...'\n        trimRight\n        basedOn='letters'\n      />\n      </div>\n    </div>\n  </div>\n);\n\nconst MoviePoster = ({poster}) => (\n  <img src={poster} alt=\"Movie Poster\" className=\"Movie__Poster\"/>\n);\n\nconst MovieGenre = ({genre}) => (\n  <span className=\"Movie__Genre\">{genre} </span>\n);\n\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired\n}\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired\n}\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {\n\n  }\n\n  componentDidMount = () => {\n    setTimeout(() => {\n      this._getMovies()\n    }, 1100)\n    // this._getMovies() for enough loading time\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(res => res.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map( (movie, index) => {\n      return <Movie\n        title={movie.title}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        rank={index}\n        rating={movie.rating}\n        >\n        <script\n          src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n          integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n          crossorigin=\"anonymous\">\n        </script>\n      </Movie>\n    })\n    return movies\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"lds\"}>\n        {movies ? this._renderMovies() : <div className=\"lds-facebook\"><div></div><div></div><div></div></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}